{"version":3,"sources":["app/initialize.js","app/ok3Dploca.js","app/okNoga.js","app/okPolyTable.js","app/swpUI.js","app/tdSetup.js","app/tdTable.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzzzxfile":"public/app.js","sourcesContent":["\r\n\r\nimport { World, Cube } from 'tdSetup';\r\nimport TableCC from 'tdTable';\r\nimport okNoga from 'okNoga';\r\nimport ok3Dploca from 'ok3Dploca';\r\nimport okPolyTable from 'okPolyTable';\r\nimport { SwpNumber, SwpChoice } from 'swpUI';\r\n\r\n\r\n\r\nvar objects = [];\r\nvar currentObj = 0;\r\nexport let glview,gapp = 0;\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n\r\n\r\n  glview = new World();\r\n\r\n  objects.push(new okPolyTable() );\r\n  objects.push( new TableCC() );\r\n  objects.push( new okNoga() );\r\n  objects.push( new ok3Dploca() );\r\n\r\n  buildControls();\r\n\r\n  bindButtons();\r\n\r\n  console.log('Initialized app');\r\n});\r\n\r\n\r\nfunction buildControls ( ) {\r\n  \r\n\r\n  let obj = objects[currentObj];\r\n\r\n  glview.add( obj );\r\n  \r\n  let container = document.getElementById('controls');\r\n  \r\n  while (container.hasChildNodes()) {\r\n    container.removeChild(container.lastChild);\r\n  }\r\n\r\n  for ( var param in obj.parameters ) {   \r\n    if ( obj.parameters.hasOwnProperty(param)){\r\n      let p = obj.parameters[param];\r\n      if ( p.type === 'number') {\r\n        let options = {\r\n          label: param,\r\n          min: p.min,\r\n          max: p.max,\r\n          default: p.v ,\r\n          step: 0.01,\r\n          screen: 0.01,\r\n          measure: p.unit\r\n        };\r\n        let control = new SwpNumber ( container , options , obj );\r\n        //console.log( p);       \r\n      }\r\n      if ( p.type === 'choice') {\r\n        //et control = new SwpChoice ( p );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n var nextObj = function () {\r\n\r\n  glview.remove( objects[currentObj]);\r\n  if ( currentObj == objects.length-1) {\r\n    currentObj=0;\r\n  } else {\r\n    currentObj++;\r\n  }\r\n  buildControls();\r\n}\r\n\r\nvar prevObj = function() {\r\n\r\n  glview.remove( objects[currentObj]);\r\n  if ( currentObj == 0) {\r\n    currentObj=objects.length-1;\r\n  } else {\r\n    currentObj--;\r\n  }\r\n  buildControls();\r\n}\r\n\r\nfunction bindButtons () {\r\n\r\n  var prev = document.getElementById('prevObj');\r\n  prev.onclick = function () { prevObj()} ;\r\n\r\n  var next = document.getElementById('nextObj');\r\n  next.onclick = function() { nextObj() };\r\n\r\n\r\n\r\n}\r\n\r\nfunction setMaterial(mat){\r\n\r\n}","import * as THREE from 'three';\r\nimport GlslCanvas from 'glslCanvas';\r\n\r\n\r\nfunction ParaNumber ( v , min,max, unit ){\r\n\r\n    this.type = 'number';\r\n    this.v = v;\r\n    this.min = min;\r\n    this.max = max;\r\n    this.unit = unit || '';\r\n    \r\n}\r\n\r\n\r\nlet ok3DplocaDefaultParams = {\r\n    length : new ParaNumber( 1.2, 0.2, 2.0, 'm'),\r\n    width : new ParaNumber( 0.6, 0.2, 2.0, 'm'),\r\n    segments : new ParaNumber ( 8, .1, 16, ''),\r\n    u : new ParaNumber ( 1, 0.5, 20.0, ''),\r\n    v : new ParaNumber ( 1, 0.5, 20.0, ''),\r\n    depth: new ParaNumber ( 0.02, 0, 0.1, 'm'),\r\n    //\r\n    cond : function () {\r\n        return true;\r\n        //return  this.legLower.v <= this.legUpper.v && \r\n        //        this.legUpper.v * 2 < this.width.v ;\r\n    }\r\n}\r\n\r\nexport default function ok3Dploca ( parameters = ok3DplocaDefaultParams ) {\r\n    this.parameters = parameters ;\r\n    this.group = new THREE.Group();\r\n    \r\n\r\n  \r\n    this.changed = false;\r\n\r\n    \r\n\r\n    var canv = createShader();\r\n    this.shcanvas = canv.shCanvas;\r\n    this.sandbox = canv.sandbox; \r\n    this.sendToShader( this.parameters.u.v,this.parameters.v.v);\r\n    \r\n\r\n    this.material = new THREE.MeshPhongMaterial( {  wireframe: false });\r\n\r\n\r\n    var dispMap = new THREE.CanvasTexture(this.shcanvas);\r\n    this.material.map = dispMap;\r\n    this.material.displacementMap = dispMap;\r\n    this.material.displacementScale = this.parameters.depth.v;\r\n    this.material.map.needsUpdate=true;\r\n    this.material.needsUpdate = true;\r\n\r\n    this.build();\r\n    //console.log(dispMap);\r\n}\r\n\r\nok3Dploca.prototype.getMesh = function () {\r\n    return this.group;\r\n}\r\n\r\nok3Dploca.prototype.update = function (scene) {\r\n    this.scene = scene;\r\n    \r\n\r\n    if (this.changed) {\r\n        scene.remove(this.group)\r\n        this.build();       \r\n        scene.add(this.group);\r\n    }\r\n}\r\n\r\nok3Dploca.prototype.isOK = function ( para , v ) {\r\n    //temporery paramterers\r\n    let tPara = Object.assign( {} , this.parameters);\r\n    tPara[para].v = v;\r\n    return tPara.cond();\r\n}\r\n\r\nok3Dploca.prototype.build = function () {\r\n\r\n        //mat\r\n        this.sendToShader( this.parameters.u.v,this.parameters.v.v);\r\n        \r\n        var dispMap = new THREE.CanvasTexture(this.shcanvas);\r\n        \r\n        //dispMap.needsUpdate= true;\r\n        this.material.map = dispMap;\r\n        this.material.displacementMap = dispMap;\r\n        this.material.displacementScale = this.parameters.depth.v;\r\n        this.material.map.needsUpdate = true;\r\n        this.material.needsUpdate = true;\r\n\r\n        //\r\n        this.changed = false;\r\n    \r\n        this.group = new THREE.Group();\r\n\r\n        var points = [];\r\n\r\n        var aspekt =  this.parameters.width.v / this.parameters.length.v ;\r\n        var geometry = new THREE.PlaneGeometry(  this.p('length'), this.p('width') , \r\n                                               10*this.p('segments'), aspekt*10*this.p('segments'));\r\n        var mesh = new THREE.Mesh( geometry, this.material );\r\n\r\n        mesh.translateY( .5 );\r\n\r\n        this.group.add( mesh );\r\n\r\n}\r\n\r\nok3Dploca.prototype.p = function ( paraname ) {\r\n    if ( this.parameters.hasOwnProperty(paraname)) {\r\n        return this.parameters[paraname].v;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nok3Dploca.prototype.sendToShader = function ( u,v ) {\r\n    this.sandbox.setUniform('u_vek', u, v);\r\n}\r\n\r\nvar createShader = function () {\r\n\r\n    // 1 novi canvas ?\r\n    var shCanvas = document.createElement('canvas');\r\n    shCanvas.width = 512;\r\n    shCanvas.height = 512;\r\n    var sandbox = new GlslCanvas(shCanvas);\r\n\r\n    // 2 shader\r\n\r\n    // Load only the Fragment Shader\r\n\r\n    \r\n\r\n    var string_frag_code = `\r\n\r\n    #ifdef GL_ES\r\n    precision mediump float;\r\n    #endif\r\n    \r\n    uniform vec2 u_resolution;\r\n    uniform vec2 u_mouse;\r\n    uniform float u_time;\r\n    uniform vec2 u_vek;\r\n    \r\n    float random (in vec2 st) { \r\n        return fract(sin(dot(st.xy,\r\n                             vec2(12.9898,78.233))) \r\n                    * 43758.5453123);\r\n    }\r\n    \r\n    // Value noise by Inigo Quilez - iq/2013\r\n    // https://www.shadertoy.com/view/lsf3WH\r\n    float noise(vec2 st) {\r\n        vec2 i = floor(st);\r\n        vec2 f = fract(st);\r\n        vec2 u = f*f*(3.0-2.0*f);\r\n        return mix( mix( random( i + vec2(0.0,0.0) ), \r\n                         random( i + vec2(1.0,0.0) ), u.x),\r\n                    mix( random( i + vec2(0.0,1.0) ), \r\n                         random( i + vec2(1.0,1.0) ), u.x), u.y);\r\n    }\r\n    \r\n    mat2 rotate2d(float angle){\r\n        return mat2(cos(angle),-sin(angle),\r\n                    sin(angle),cos(angle));\r\n    }\r\n    \r\n    float lines(in vec2 pos, float b){\r\n        float scale = 10.0;\r\n        pos *= scale;\r\n        return smoothstep(0.0,\r\n                        .5+b*.5,\r\n                        abs((sin(pos.x*3.1415)+b*2.0))*.5);\r\n    }\r\n    \r\n    void main() {\r\n        vec2 st = gl_FragCoord.xy/u_resolution.xy;\r\n        st.y *= u_resolution.y/u_resolution.x;\r\n    \r\n        vec2 pos = st.yx* u_vek;\r\n    \r\n        float pattern = pos.x;\r\n    \r\n        // Add noise\r\n        pos = rotate2d( noise(pos) ) * pos;\r\n        \r\n        // Draw lines\r\n        pattern = lines(pos,.5);\r\n    \r\n        gl_FragColor = vec4(vec3(pattern),1.0);\r\n    }`;\r\n\r\n    sandbox.load(string_frag_code);\r\n\r\n    sandbox.setUniform(\"u_vek\",5.2,2.3);\r\n\r\n    //debug\r\n    //var dbgdiv = document.getElementById('debug');\r\n    //dbgdiv.appendChild(shCanvas);\r\n\r\n    return { sandbox, shCanvas };\r\n}\r\n\r\n\r\n","import * as THREE from 'three';\r\n\r\n\r\nfunction ParaNumber ( v , min,max, unit ){\r\n\r\n    this.type = 'number';\r\n    this.v = v;\r\n    this.min = min;\r\n    this.max = max;\r\n    this.unit = unit || '';\r\n    \r\n}\r\n\r\n\r\nlet okNogaDefaultParams = {\r\n    length : new ParaNumber( 0.6, 0.1, 1.2, 'm'),\r\n    widthLower : new ParaNumber( 0.05, 0.05, 0.15, 'm'),\r\n    widthHigher : new ParaNumber( 0.1, 0.05, 0.15, 'm'),\r\n    segments: new ParaNumber ( 3, 2, 20, ''),\r\n    taper: new ParaNumber (1,0.5,2.0, ''),\r\n    sides: new ParaNumber ( 4, 3, 16, ''),\r\n    cond : function () {\r\n        return true;\r\n        //return  this.legLower.v <= this.legUpper.v && \r\n        //        this.legUpper.v * 2 < this.width.v ;\r\n    }\r\n}\r\n\r\nexport default function okNoga ( parameters = okNogaDefaultParams ) {\r\n    this.parameters = parameters ;\r\n    this.group = new THREE.Group();\r\n    this.material = new THREE.MeshLambertMaterial( { wireframe: false });\r\n    //this.extrudeSettings = { steps:1 , amount: parameters.plocaD.v , bevelEnabled: false };\r\n    this.changed = false;\r\n\r\n    this.build();\r\n}\r\n\r\nokNoga.prototype.getMesh = function () {\r\n    return this.group;\r\n}\r\n\r\nokNoga.prototype.update = function (scene) {\r\n    this.scene = scene;\r\n    if (this.changed) {\r\n        scene.remove(this.group)\r\n        this.build();       \r\n        scene.add(this.group);\r\n    }\r\n}\r\n\r\nokNoga.prototype.isOK = function ( para , v ) {\r\n    //temporery paramterers\r\n    let tPara = Object.assign( {} , this.parameters);\r\n    tPara[para].v = v;\r\n    return tPara.cond();\r\n}\r\n\r\nokNoga.prototype.build = function () {\r\n    \r\n        this.changed = false;\r\n    \r\n        this.group = new THREE.Group();\r\n\r\n        var points = [];\r\n\r\n        var segh = this.parameters.length.v/ Math.ceil(this.parameters.segments.v)*2;\r\n        console.log(segh);\r\n        for ( var i = 0; i< Math.ceil(this.parameters.segments.v); i++) {   \r\n            var taper = this.parameters.taper.v +  (1-this.parameters.taper.v) / Math.ceil(this.parameters.segments.v) * i;\r\n            points.push( new THREE.Vector2( this.parameters.widthLower.v * taper , segh * i));\r\n            points.push( new THREE.Vector2( this.parameters.widthHigher.v * taper , segh * (i + 0.25)));\r\n        }\r\n        \r\n        var geometry = new THREE.LatheGeometry( points , this.parameters.sides.v  );\r\n        var mesh = new THREE.Mesh( geometry, this.material );\r\n        mesh.castShadow=true;\r\n        this.group.add( mesh );\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\n\r\nfunction ParaNumber ( v , min,max, unit ){\r\n\r\n    this.type = 'number';\r\n    this.v = v;\r\n    this.min = min;\r\n    this.max = max;\r\n    this.unit = unit || '';\r\n    \r\n}\r\n\r\n\r\nlet okPolyTableDefaultParams = {\r\n    sides : new ParaNumber( 5, 3, 12, ''),\r\n    radius : new ParaNumber( 0.3, 0.1, 0.8, 'm'),\r\n    height : new ParaNumber( 0.3, 0.2, 1.0, 'm'),\r\n    \r\n    cond : function () {\r\n        return  true;\r\n    }\r\n}\r\n\r\n\r\nexport default function okPolyTable ( parameters = okPolyTableDefaultParams ) {\r\n    this.parameters = parameters ;\r\n\r\n    this.group = new THREE.Group();\r\n    this.material = new THREE.MeshStandardMaterial( { wireframe: false });\r\n\r\n    this.extrudeSettings = { steps:1 , amount: 0.02 , bevelEnabled: false };\r\n\r\n    this.changed = false;\r\n\r\n    this.build();\r\n}\r\n\r\nokPolyTable.prototype.build = function () {\r\n\r\n    var N= Math.floor(this.parameters.sides.v);\r\n    var H= this.parameters.height.v;\r\n    var R= this.parameters.radius.v;\r\n    var D = 0.02;\r\n\r\n    this.changed = false;\r\n\r\n    // this.group.matrix = new THREE.Matrix4();\r\n    // this.group.updateMatrix();\r\n\r\n    this.group = new THREE.Group();\r\n    \r\n    var mGrupa = new THREE.Group();\r\n\r\n    // osnovne tocke\r\n    var kut = Math.PI*2 / N;\r\n    var tocke = [];\r\n    for (var i=0; i<N ; i++) {\r\n      tocke.push(new THREE.Vector2( Math.sin(kut*i)*R,Math.cos(kut*i)*R));\r\n    }\r\n  \r\n    //ploca\r\n    var ploca2d = new THREE.Shape();\r\n    ploca2d.fromPoints(tocke);\r\n    var plocaExtrude = new THREE.ExtrudeGeometry( ploca2d, this.extrudeSettings );\r\n    var ploca = new THREE.Mesh( plocaExtrude, this.material);\r\n  \r\n    ploca.castShadow = true;\r\n    mGrupa.add(ploca);\r\n  \r\n    //noge\r\n    for (var j=0; j<N ; j++) {\r\n  \r\n      var t1 = new THREE.Vector3 (tocke[j].x, tocke[j].y, D);\r\n      if (j != N-1) \r\n        var t2 = new THREE.Vector3 (tocke[j+1].x, tocke[j+1].y, D);\r\n      else  \r\n        var t2 = new THREE.Vector3 (tocke[0].x, tocke[0].y, D);\r\n  \r\n      var tempVec = new THREE.Vector3 ( \r\n        ( t1.x + t2.x ) / 2,\r\n        ( t1.y + t2.y ) / 2,\r\n        0 );\r\n  \r\n      var vec = tempVec.clone();\r\n      \r\n      vec.normalize().multiplyScalar(H).add(tempVec);\r\n               \r\n      var noga2d = new THREE.Shape([t1,vec,t2]);\r\n  \r\n      var nogaExtrude= new THREE.ExtrudeGeometry( noga2d, this.extrudeSettings);\r\n      var noga = new THREE.Mesh( nogaExtrude, this.material);\r\n  \r\n      //var pivot=new THREE.Object3D();\r\n      noga.translateOnAxis(new THREE.Vector3().copy(tempVec).normalize() , tempVec.length() );\r\n      //pivot.add(noga);\r\n  \r\n      var axis = new THREE.Vector3().subVectors(t2,t1);\r\n      axis.normalize();\r\n      noga.rotateOnAxis( axis,Math.PI/2);\r\n      noga.position.z = - tempVec.length() + D;\r\n     // noga.updateMatrix();\r\n      \r\n      noga.castShadow = true;\r\n  \r\n      mGrupa.add(noga);\r\n  \r\n     \r\n    }\r\n  \r\n    mGrupa.rotateX(Math.PI/2);\r\n    mGrupa.translateZ(-H-D);\r\n  \r\n    mGrupa.castShadow = true;\r\n    this.group.add(mGrupa);\r\n   \r\n}\r\n\r\nokPolyTable.prototype.getMesh = function () {\r\n    return this.group;\r\n}\r\n\r\nokPolyTable.prototype.update = function (scene) {\r\n    this.scene = scene;\r\n    if (this.changed) {\r\n        scene.remove(this.group)\r\n        this.build();       \r\n        scene.add(this.group);\r\n    }\r\n}\r\n\r\nokPolyTable.prototype.isOK = function ( para , v ) {\r\n    //temporery paramterers\r\n    let tPara = Object.assign( {} , this.parameters);\r\n    tPara[para].v = v;\r\n    return tPara.cond();\r\n}","\r\n// 16.9.2017.\r\n// ------ SwpNumber -------\r\n// kontrola za numerički unos pomoći vertikalnog skrolanja ili sweepanja\r\n// TODO\r\n// Trenutno je state kontrole unutar DOM-a , enkapsulirati state i refaktorirat \r\n\r\nexport class SwpNumber {\r\n\r\n    constructor ( htmlEl, params , obj ) {\r\n\r\n        //defaults for mouse event\r\n        this.mevent =  {\r\n            down : false,\r\n            target : undefined,\r\n            lasty:0.0,\r\n            value: 0.0,\r\n            screen : 0.01,\r\n            max : 100,\r\n            min: -100,\r\n            step: 0.01,\r\n            measure: \"\",\r\n            time: 0\r\n        };\r\n        \r\n        this.obj = obj;\r\n        this.name = params.label;\r\n\r\n        var outdiv = document.createElement( 'div'); \r\n        outdiv.className = \"numberSweep noselect\";\r\n        outdiv.id = params.id || params.label;\r\n        outdiv.setAttribute('screen', params.screen || 0.1 );\r\n        outdiv.setAttribute('min',params.min);\r\n        outdiv.setAttribute('max',params.max);\r\n        outdiv.setAttribute('measure',params.measure || \"\");\r\n        outdiv.setAttribute('step',params.step || 1.0 );\r\n    \r\n        var labelp = document.createElement('p');\r\n        labelp.className = \"label\";\r\n        labelp.innerText = params.label;\r\n        outdiv.appendChild(labelp);\r\n    \r\n        var numberp = document.createElement('p');\r\n        numberp.className = \"nmb\";\r\n        numberp.innerText = params.default;\r\n        outdiv.appendChild(numberp);\r\n        \r\n        this.mevent.screen = params.screen || 0.1 \r\n        this.mevent.min = params.min;\r\n        this.mevent.max = params.max;\r\n        this.mevent.step = params.step || 1.0\r\n        this.mevent.measure = params.measure || \"\"   \r\n        this.mevent.value = params.value;\r\n\r\n        this.nmb = numberp;\r\n        this.changeValueText ( params.default );\r\n\r\n        this.activate ( outdiv );\r\n        htmlEl.appendChild ( outdiv );\r\n\r\n    }\r\n\r\n    activate (  outdiv ){\r\n        outdiv.addEventListener('mousedown' , (e) => { this.movestart (e)}  , {passive:false});\r\n        outdiv.addEventListener('touchstart' , (e) => { this.movestart (e)} , {passive:false} );\r\n        outdiv.addEventListener('dblclick' , this.editNmb);   \r\n    }\r\n\r\n    movestart (event) {\r\n        // console.log( this.mevent);\r\n        if ( this.mevent.down != true) {\r\n          //event.preventDefault();\r\n          //event.stopPropagation();\r\n    \r\n          this.mevent.down = true;\r\n          this.mevent.target = event.currentTarget;\r\n          if (event.changedTouches){\r\n            this.mevent.lasty = event.changedTouches.item(0).screenY;\r\n            document.addEventListener( 'touchmove' , (e) => { this.move(e)} , {passive:false});\r\n            document.addEventListener( 'touchend' , (e) => { this.moveend(e)  , {passive:false}} );\r\n          } else {\r\n            this.mevent.lasty = event.screenY;\r\n            document.addEventListener( 'mousemove' , (e) => { this.move(e)} , {passive:false} );\r\n            document.addEventListener( 'mouseup' , (e) => { this.moveend(e)  , {passive:false}});\r\n          }\r\n          this.mevent.screen = this.mevent.target.getAttribute('screen') || 0.1;\r\n          this.mevent.min = this.mevent.target.getAttribute('min') || -100 ;\r\n          this.mevent.max = this.mevent.target.getAttribute('max') || 100;\r\n          this.mevent.step = this.mevent.target.getAttribute('step') || 0.1;\r\n          this.mevent.measure = this.mevent.target.getAttribute('measure') || \"\";   \r\n          this.mevent.value = this.mevent.target.querySelector('.nmb').innerText.match(/\\-*\\d+\\.+\\d+|\\-*\\d+/)[0] / this.mevent.screen;\r\n          var t = Date.now();\r\n          if (t - this.mevent.time < 200 ){ \r\n            editNmb (event);\r\n            } \r\n          this.mevent.time = t;\r\n          \r\n        }\r\n    }\r\n\r\n    move  (event) {\r\n\r\n        if (this.mevent.down == true){  //nisam siguran da li je ova provjera nužna..\r\n    \r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          \r\n          if ( event.changedTouches){\r\n            var tmp = this.mevent.lasty - event.changedTouches.item(0).screenY;\r\n            this.mevent.lasty = event.changedTouches.item(0).screenY;\r\n          } else {\r\n            var tmp = this.mevent.lasty - event.screenY;\r\n            this.mevent.lasty = event.screenY;\r\n            }\r\n          \r\n          this.mevent.value += tmp ;\r\n          //console.log(this.mevent.value + \"max :\" + this.mevent.max);\r\n          if (this.mevent.value * this.mevent.screen > this.mevent.max)  { this.mevent.value = this.mevent.max / this.mevent.screen; }\r\n          if (this.mevent.value * this.mevent.screen < this.mevent.min) { this.mevent.value = this.mevent.min / this.mevent.screen ; }\r\n          let steped = Math.ceil(this.mevent.value*this.mevent.screen/this.mevent.step)*this.mevent.step;\r\n          let isitOK = this.obj.isOK( this.name , steped  );\r\n          console.log(isitOK);\r\n          if ( isitOK == false) {\r\n            return; \r\n          }\r\n\r\n          this.nmb.innerText = String(steped.toFixed(2)) + ( this.mevent.measure);\r\n          \r\n          //color changing TODO\r\n          if ( this.mevent.target.style.backgroundColor ){\r\n            color = this.mevent.target.style.backgroundColor.split( /rgb\\(|\\,|\\)|\\s/);\r\n            raspon = this.mevent.max - this.mevent.min ;\r\n            var r = parseInt(256 * (this.mevent.value*this.mevent.screen+raspon/2)/raspon);\r\n            var g = parseInt(color[3]);\r\n            var b = parseInt(color[5]);\r\n            this.mevent.target.style.backgroundColor = \"rgb\\(\" + r + ',' + g + ',' + b + '\\)';\r\n            // console.log(\"rgb\\(\" + r + ',' + g + ',' + b + '\\)' );\r\n          }\r\n          \r\n          // like a callback but more stupid\r\n          \r\n          this.obj.parameters[ this.name ].v = this.mevent.value * this.mevent.screen ;\r\n          this.obj.changed = true;\r\n\r\n    \r\n          //fire input event\r\n    \r\n          var ievent = new InputEvent ( 'input',{\r\n            target : this.mevent.target,\r\n            bubbles : false,\r\n            cancelable : true\r\n          });\r\n        //   console.log(\"this.mevent  \" + this.mevent.value);\r\n        //   console.log(\"this.mevent scaled \" + this.mevent.value * this.mevent.screen);\r\n          this.mevent.target.value = this.mevent.value * this.mevent.screen;\r\n          this.mevent.target.dispatchEvent(ievent); \r\n          \r\n        }\r\n    }\r\n\r\n    moveend (event) {\r\n        this.mevent.down = false;\r\n        //this.mevent.target = undefined;\r\n        this.mevent.lasty = 0.0;\r\n        document.removeEventListener( 'mousemove' , this.move );\r\n        document.removeEventListener( 'mouseup' , this.moveend );\r\n        document.removeEventListener( 'touchmove' , this.move );\r\n        document.removeEventListener( 'touchstop' , this.moveend );\r\n    }\r\n\r\n    editNmb ( event ) {\r\n        var ni = document.getElementById('numbInput');\r\n        if (ni) {\r\n          document.body.removeChild(ni);\r\n        }\r\n        //console.log ( event.clientX + \", \" + event.clientY);\r\n        var inp = document.createElement('input');\r\n        inp.id = \"numbInput\";\r\n        inp.value = this.mevent.value * this.mevent.screen;\r\n        inp.style = \" display: table ; position: fixed; z-index: 5; left: \"+ this.mevent.target.offsetLeft + \"px ; top: \" + (this.mevent.target.offsetTop+50) + \"px; width: \" + (this.mevent.target.offsetWidth-5) + \"px;\" + \"height: \" + 30 + \"px; background-color:\" + ( this.mevent.target.style.backgroundColor || window.getComputedStyle(this.mevent.target).backgroundColor  ) + \";\" ;\r\n        document.body.appendChild(inp);\r\n        setTimeout(function(){document.getElementById('numbInput').focus();}, 0);\r\n        ;\r\n        \r\n        inp.onchange = function () {  \r\n          ni=document.getElementById('numbInput');\r\n          //console.log(\"submited: \" + ni.value );\r\n          this.mevent.value = ni.value;\r\n          this.changeValueText(parseFloat(ni.value));\r\n          document.body.removeChild(ni);\r\n        };\r\n        ni.onclick , ni.dblclick = function () {};\r\n        \r\n        document.onclick =  function removeInp() {\r\n          if (ni=document.getElementById('numbInput')) {\r\n            document.body.removeChild(ni); \r\n          }\r\n          document.removeEventListener('onclick', removeInp);\r\n        };\r\n    }\r\n\r\n    changeValueText( val )\r\n    {\r\n      this.mevent.value = val;\r\n      if (val  > this.mevent.max)  { this.mevent.value = this.mevent.max ; }\r\n      if (val  < this.mevent.min) { this.mevent.value = this.mevent.min; }\r\n      var steped = Math.ceil(this.mevent.value/this.mevent.step)*this.mevent.step;\r\n      this.nmb.innerText = String(steped.toFixed(2)) + ( this.mevent.measure);\r\n    }\r\n\r\n}","import * as THREE from 'three';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nexport class World {\r\n    constructor() {\r\n        this.objects = [];\r\n        this.createScene();\r\n\r\n        this.materials = [  new THREE.MeshStandardMaterial({map: new THREE.TextureLoader().load( \"img/1.jpg\" )}) ,\r\n                            new THREE.MeshStandardMaterial({map: new THREE.TextureLoader().load( \"img/2.jpg\" )}) ,\r\n                            new THREE.MeshStandardMaterial({map: new THREE.TextureLoader().load( \"img/3.jpg\" )}) ];\r\n\r\n    }\r\n\r\n    createScene() {\r\n        this.container = window['document'].getElementById('world');\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(40,this.container.clientWidth / this.container.clientHeight , 0.01, 200);\r\n        \r\n        this.camera.position.y=1;\r\n        this.camera.position.z=3;\r\n        this.camera.lookAt( new THREE.Vector3(1,1,0));\r\n        this.camera.matrixAutoUpdate = true;\r\n\r\n        this.renderer = new THREE.WebGLRenderer( {antialias: true });\r\n        this.renderer.setSize( this.container.clientWidth, this.container.clientHeight );\r\n        this.renderer.setClearColor( 0xffffff );\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\r\n        this.container.appendChild(this.renderer.domElement);\r\n\r\n        this.controls = new OrbitControls( this.camera , this.renderer.domElement);\r\n        \r\n        //AMBIENTALNO\r\n        var light = new THREE.AmbientLight( 0xeeeeee,0.8);\r\n        this.scene.add( light );\r\n\r\n        //LAMPA\r\n        var lamp = new THREE.DirectionalLight ( 0xaaaaaa, 0.9, 100, 1);\r\n        lamp.position.x = 2; \r\n        lamp.position.z = 2.5;\r\n        //Set up shadow properties for the light\r\n        lamp.castShadow=true;\r\n        lamp.shadow.mapSize.width = 2048;  // default\r\n        lamp.shadow.mapSize.height = 2048; // default\r\n        lamp.shadow.camera.near = 0.5;       // default\r\n        lamp.shadow.camera.far = 5000;      // default\r\n        this.scene.add ( lamp );\r\n\r\n        //TLO\r\n        var tlo = new THREE.Mesh ( new THREE.PlaneGeometry(500,500,50,50), new THREE.ShadowMaterial());\r\n        tlo.rotateX(-Math.PI/2);\r\n        tlo.receiveShadow = true;\r\n        this.scene.add(tlo);\r\n\r\n\r\n        window.addEventListener( 'resize', () => {\r\n            this.camera.aspect = this.container.clientWidth/ this.container.clientHeight;\r\n            this.camera.updateProjectionMatrix();\r\n            this.renderer.setSize( this.container.clientWidth, this.container.clientHeight );\r\n        }, false );\r\n        \r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        requestAnimationFrame(() => {\r\n            this.render();\r\n        });\r\n        \r\n        this.objects.forEach((object) => {\r\n            object.update(this.scene);\r\n        });\r\n        \r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n\r\n    \r\n\r\n    add(obj) {\r\n        this.objects.push(obj);\r\n        obj.getMesh().castShadow = true;\r\n        this.scene.add(obj.getMesh());\r\n    }\r\n\r\n    remove(mesh) {\r\n        this.objects.pop(mesh);\r\n        this.scene.remove(mesh.getMesh());\r\n    }\r\n\r\n    getScene() {\r\n        return this.scene;\r\n    }\r\n\r\n    changeMat ( id ) {\r\n\r\n        var textureLoader = new THREE.TextureLoader();\r\n        var texture = textureLoader.load( \"./img/\"+(id+1)+\".jpg\" );\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        texture.wrapT = THREE.RepeatWrapping;\r\n        texture.repeat.set( 1, 1 );\r\n\r\n        this.objects[ this.objects.length - 1 ].material.map=texture;\r\n        this.objects[ this.objects.length - 1 ].material.map.needsUpdate=true;\r\n        this.objects[ this.objects.length - 1 ].material.needsUpdate=true;\r\n        this.objects[ this.objects.length - 1 ].changed=true;\r\n        console.log( this.objects[ this.objects.length - 1 ] );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class Cube {\r\n    constructor(size) {\r\n      this.geometry = new THREE.BoxGeometry(size.width, size.height, size.depth);\r\n      this.material = new THREE.MeshBasicMaterial({\r\n        color: 0x00ff00\r\n      });\r\n      \r\n      this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n    }\r\n    \r\n    update() {\r\n      this.mesh.rotation.x += 0.01;\r\n      this.mesh.rotation.y += 0.01;\r\n    }\r\n    \r\n    getMesh() {\r\n      return this.mesh;\r\n    }\r\n}\r\n\r\n","import * as THREE from 'three';\r\n\r\n\r\nfunction ParaNumber ( v , min,max, unit ){\r\n\r\n    this.type = 'number';\r\n    this.v = v;\r\n    this.min = min;\r\n    this.max = max;\r\n    this.unit = unit || '';\r\n    \r\n}\r\n\r\n\r\nlet tableccDefaultParams = {\r\n    length : new ParaNumber( 1.2, 0.6, 3.0, 'm'),\r\n    width : new ParaNumber( 0.6, 0.4, 2.0, 'm'),\r\n    height : new ParaNumber( 0.65, 0.2, 1.5, 'm'),\r\n    legUpper : new ParaNumber( 0.15, 0.1, 0.5, 'm'),\r\n    legLower: new ParaNumber( 0.03, 0.01, 0.5, 'm'),\r\n    legAngle: new ParaNumber ( Math.PI/4 , 0 , Math.PI/2, 'rad'),\r\n    plocaD : new ParaNumber( 0.025, 0.02, 0.1, 'm'),\r\n    cond : function () {\r\n        return  this.legLower.v <= this.legUpper.v && \r\n                this.legUpper.v * 2 < this.width.v ;\r\n    }\r\n}\r\n\r\n\r\nexport default function TableCC ( parameters = tableccDefaultParams ) {\r\n    this.parameters = parameters ;\r\n\r\n    this.group = new THREE.Group();\r\n    this.material = new THREE.MeshStandardMaterial( { wireframe: false });\r\n\r\n    this.extrudeSettings = { steps:1 , amount: parameters.plocaD.v , bevelEnabled: false };\r\n\r\n    this.changed = false;\r\n\r\n    this.build();\r\n}\r\n\r\nTableCC.prototype.build = function () {\r\n\r\n    this.changed = false;\r\n\r\n    // this.group.matrix = new THREE.Matrix4();\r\n    // this.group.updateMatrix();\r\n\r\n    this.group = new THREE.Group();\r\n\r\n\r\n    let H=this.parameters.height.v;\r\n    console.log( H);\r\n    let W=this.parameters.width.v;\r\n    let L=this.parameters.length.v;\r\n    let lgU=this.parameters.legUpper.v;\r\n    let lgD=this.parameters.legLower.v;\r\n    let lgA=this.parameters.legAngle.v;\r\n\r\n    // ploča \r\n    let cornerL = lgU * Math.cos(lgA);\r\n    let cornerW = lgU * Math.sin(lgA);\r\n\r\n    let pnts = [ \r\n        new THREE.Vector2(0,-W/2),\r\n        new THREE.Vector2( L/2 - cornerL, -W/2 ),\r\n        new THREE.Vector2( L/2, -W/2+cornerW),\r\n        new THREE.Vector2( L/2, W/2 - cornerW ),\r\n        new THREE.Vector2( L/2 - cornerL, W/2 ),\r\n        new THREE.Vector2( -L/2 + cornerL, W/2 ),\r\n        new THREE.Vector2( -L/2, W/2 - cornerW ), \r\n        new THREE.Vector2( -L/2, -W/2 + cornerW ),\r\n        new THREE.Vector2( -L/2 + cornerL, -W/2 ),\r\n        new THREE.Vector2(0,-W/2) \r\n    ];\r\n\r\n    let ploca2d = new THREE.Shape(pnts);\r\n    let plocaGeo = new THREE.ExtrudeBufferGeometry( ploca2d, this.extrudeSettings );\r\n    let plocaMesh = new THREE.Mesh ( plocaGeo, this.material );\r\n\r\n    //plocaMesh.rotateX(Math.PI/2);\r\n    //plocaMesh.translateZ( -H);\r\n    \r\n    plocaMesh.castShadow = true;\r\n    this.group.add(plocaMesh);\r\n\r\n    let lpnts = [\r\n        new THREE.Vector2( - lgU/2, 0),\r\n        new THREE.Vector2(   lgU/2, 0),\r\n        new THREE.Vector2(   lgD/2, H - this.parameters.plocaD.v),\r\n        new THREE.Vector2( - lgD/2, H - this.parameters.plocaD.v),\r\n        new THREE.Vector2( - lgU/2, 0)\r\n    ];\r\n\r\n    let leg2d = new THREE.Shape(lpnts);\r\n    let legGeo = new THREE.ExtrudeBufferGeometry( leg2d, this.extrudeSettings );\r\n    let legMesh = new THREE.Mesh( legGeo, this.material);\r\n\r\n    //legMesh.rotateY( lgA );\r\n    \r\n    \r\n    for ( var i=0; i<4; i++) {\r\n        var leg = legMesh.clone( );\r\n\r\n        if ( i == 0 || i == 2 ) {\r\n            var dest = new THREE.Vector2( L/2 - cornerL/2, W/2 - cornerW/2 );\r\n            if ( i == 2) {\r\n                dest.negate();\r\n            }\r\n        } else {\r\n            var dest = new THREE.Vector2( -L/2 + cornerL/2,  W/2 - cornerW/2  );\r\n            if ( i == 3 ) {\r\n                dest.negate();\r\n            }\r\n        }\r\n\r\n        let dist = dest.length();\r\n        dest.normalize();\r\n\r\n        let axis = new THREE.Vector3( dest.x, dest.y , 0 );\r\n\r\n        leg.translateOnAxis( axis , dist);\r\n        leg.rotateX( Math.PI/2 );\r\n\r\n        if ( i % 2 == 0 ) {\r\n            leg.rotateY( -lgA );\r\n        } else {\r\n            leg.rotateY( lgA );\r\n        }\r\n\r\n        leg.translateY( this.parameters.plocaD.v);\r\n\r\n        if ( i > 1 ){\r\n            leg.translateOnAxis ( new THREE.Vector3 ( 0,0,-1) , this.parameters.plocaD.v );\r\n        }\r\n\r\n        leg.castShadow = true;\r\n        this.group.add(leg);\r\n    }\r\n        \r\n    this.group.matrix = new THREE.Matrix4();\r\n    this.group.matrixWorldNeedsUpdate = true;\r\n    this.group.updateMatrix();\r\n    this.group.translateY(H);\r\n\r\n    console.log( this.group);\r\n    this.group.rotateX( Math.PI /2  );\r\n\r\n   \r\n}\r\n\r\nTableCC.prototype.getMesh = function () {\r\n    return this.group;\r\n}\r\n\r\nTableCC.prototype.update = function (scene) {\r\n    this.scene = scene;\r\n    if (this.changed) {\r\n        scene.remove(this.group)\r\n        this.build();       \r\n        scene.add(this.group);\r\n    }\r\n}\r\n\r\nTableCC.prototype.isOK = function ( para , v ) {\r\n    //temporery paramterers\r\n    let tPara = Object.assign( {} , this.parameters);\r\n    tPara[para].v = v;\r\n    return tPara.cond();\r\n}"]}